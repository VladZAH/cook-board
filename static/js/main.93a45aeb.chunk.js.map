{"version":3,"sources":["components/styles/no-image.png","components/styles/logo.svg","components/styles/CookBoardLogo.png","components/Item.js","components/RecipySearchForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","props","image","recipy","thumbnail","noImage","className","href","target","rel","title","alt","src","ingredients","RecipySearchForm","handleChange","e","name","setState","dish","value","console","log","state","handleSubmit","preventDefault","page","trim","fetchData","handleSuccess","response","results","data","loading","str2","split","join","Axios","get","toString","then","catch","error","handleRender","logo","length","map","el","key","nextPage","newPage","this","onSubmit","htmlFor","type","onChange","placeholder","CookBoardLogo","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.93a45aeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-image.a957eec2.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/CookBoardLogo.a985bca3.png\";","import React from 'react';\nimport './styles/item.css';\nimport noImage from './styles/no-image.png'\n\nconst Item = (props) => {\n    let image = props.recipy.thumbnail ? props.recipy.thumbnail : noImage;\n    return ( \n        <div className='card'>\n            <p className='title'>\n            <a href={props.recipy.href} target='_blank' rel='noopener noreferrer' className='title'>{props.recipy.title}</a>\n            </p>\n            <div>\n                <img alt='' className='thumbnail' src={image}></img>\n            </div>\n            <div className='info'>\n                <strong>Ingredients: </strong>{props.recipy.ingredients}\n            </div>\n        </div>\n    );\n}\n\nexport default Item;","import React from 'react';\nimport Axios from 'axios';\nimport Item from './Item';\nimport logo from './styles/logo.svg';\nimport CookBoardLogo from './styles/CookBoardLogo.png';\nimport './styles/App.css';\n\nclass RecipySearchForm extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            ingredients: '',\n            dish: '',\n            page: 1,\n            results: [],\n            loading: true\n        }\n    }\n\n    componentDidMount() {\n        Axios.get(`https://cors-anywhere.herokuapp.com/http://www.recipepuppy.com/api/?i=mushrooms&q=${this.state.dish}&p=${this.state.page.toString()}`)\n        .then(this.handleSuccess)\n        .catch((error)=>console.log(error)) \n    }\n\n    handleChange = (e) => {\n        if(e.target.name === 'dish'){\n            this.setState({dish: e.target.value})\n        }else if (e.target.name === 'ingredients'){\n            this.setState({ingredients: e.target.value})\n        }\n        \n        console.log(this.state)\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.setState({page: 1})\n\n        if(this.state.dish.trim() !== '' || this.state.ingredients.trim() !== '' ){\n            this.fetchData(this.state.page);\n        }\n    }\n\n    handleSuccess = (response) => {\n        this.setState({results: response.data.results, loading: false})\n\n    }\n\n    fetchData = (page) => {\n        if(this.state.ingredients.trim() !== '') {\n            let str = this.state.ingredients;\n            let str2 = str.split(' ').join(',');\n            Axios.get(`https://cors-anywhere.herokuapp.com/http://www.recipepuppy.com/api/?i=${str2}&q=${this.state.dish}&p=${page.toString()}`)\n            .then(this.handleSuccess)\n            .catch((error)=>console.log(error))   \n        }else{\n            Axios.get(`https://cors-anywhere.herokuapp.com/http://www.recipepuppy.com/api/?i=${this.state.ingredients}&q=${this.state.dish}&p=${page.toString()}`)\n            .then(this.handleSuccess)\n            .catch((error)=>console.log(error))               \n        }\n    }\n\n    handleRender = () => {\n        if(this.state.loading){\n            return (\n                <div>\n                    <p className='message'>\n                        Application is loading, please wait...\n                    </p>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                 </div>\n            );\n        }\n\n        if (this.state.results.length !== 0){\n            return this.state.results.map(el => {\n                return (\n                    <div key={el.href}>\n                        <Item recipy={el} />\n                    </div>\n                );\n            });\n        }else{\n            return (\n                <div className='message'>\n                    <p>Sorry nothing was found for {this.state.dish} {this.state.ingredients}</p>\n                </div>\n            );\n        }\n    }\n\n    nextPage = (e) => {\n        let newPage = this.state.page;\n        if(e.target.value === 'next'){\n            newPage += 1;\n            this.setState({page: newPage, loading: true});          \n        }else if (e.target.value === 'previous' && newPage > 1){\n            newPage -= 1;\n            this.setState({page: newPage, loading: true});\n        }\n        this.fetchData(newPage);\n    }\n\n\n    render () {\n        return (\n            <div className='App'>\n                <div onSubmit={this.handleSubmit}>\n                    <form className='form'>\n                        <label htmlFor='dish'>Type of dish:</label>\n                        <input className='input' type='text' name='dish' onChange={this.handleChange} value={this.state.dish}></input> <br />\n                        <label htmlFor='ingredients'> Ingredients:</label>\n                        <input className='input' type='text' name='ingredients' onChange={this.handleChange} placeholder='Ex. mushrooms' value={this.state.ingredients}></input> <br />\n                        <button className='button' type='submit'>SUBMIT</button>\n                    </form>\n                    <img className='cookboard' src={CookBoardLogo} alt=\"\" />\n                    <div className='content'>\n                        {this.handleRender()}\n                    </div>\n                    <p className='sign'>Bon Apetit</p>\n                </div>\n                <div className='bottom'>\n                    <button className='button' value='previous' onClick={this.nextPage}>PREVIOUS</button>\n                    <span> Page: {this.state.page.toString()} </span>\n                    <button className='button' value='next' onClick={this.nextPage}>NEXT</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default RecipySearchForm","import React from 'react';\nimport RecipySearchForm from './components/RecipySearchForm'\n\nfunction App() {\n  return (\n    <div>\n      <RecipySearchForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}